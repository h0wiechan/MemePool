{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./memepool/app.js","webpack:///./memepool/bar.js","webpack:///./memepool/header.js","webpack:///./memepool/komponent.js","webpack:///./memepool/memepool.js","webpack:///./memepool/memes_container.js","webpack:///./memepool/modal.js","webpack:///./memepool/upload_form.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,yBAAyB,iDAAQ;AACjC;AACA,CAAC,E;;;;;;;;;;;;AChBD;AAAA;AAAA;AAAoC;AACR;AAC5B,kBAAkB,kDAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gD;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAAK;AAChC;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,kEAAG,E;;;;;;;;;;;;AC5FlB;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACVrB;AAAA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,wEAAS,E;;;;;;;;;;;;ACrDxB;AAAA;AAAA;AAAA;AAAA;AAA8B;AACN;AACe;AACQ;;AAE/C;AACA;AACA,0BAA0B,+CAAM;AAChC,8BAA8B,oDAAU;AACxC,kCAAkC,wDAAc;AAChD,uBAAuB,4CAAG,yBAAyB,mEAAmE;AACtH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,uEAAQ,E;;;;;;;;;;;;ACrBvB;AAAA;AAAoC;;AAEpC,6BAA6B,kDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,IAAI;AAChC;;AAEA;AACA,0DAA0D,SAAS,aAAa,SAAS,cAAc,yBAAyB,IAAI,WAAW;AAC/I,qC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,6EAAc,E;;;;;;;;;;;;AC/D7B;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,IAAI,4BAA4B,mBAAmB,GAAG,KAAK;AACtI;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,E;;;;;;;;;;;;AC/DpB;AAAA;AAAoC;;AAEpC,yBAAyB,kDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,IAAI;AAChF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F;AAC9F;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oDAAoD,aAAa,cAAc,EAAE;AACjF,4CAA4C,cAAc,EAAE,cAAc;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,yEAAU,E","file":"./bundle-app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./memepool/app.js\");\n","import MemePool from \"./memepool\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const documentEl = $$(document);\n    const bgBars = $$(\".bg-bars\").children();\n    $$(function() {\n        bgBars.each(bar => {\n            setTimeout(() => $$(bar).removeClass(\"hidden\"), 0);\n        });\n    });\n    const options = {\n        documentEl: documentEl,\n        database: firebase.database().ref(\"memes\")\n    };\n    const memepool = new MemePool(options);\n    memepool.render();\n});","import Komponent from \"./komponent\";\nimport Modal from \"./modal\";\nclass Bar extends Komponent {\n    constructor(options) {\n        super(options);\n        this.database = options.database;\n        this.bar = $$(\".bar.hidden\")\n        this.uploadButton = $$(\".bar .inner-bar .add-button\");\n        this.uploadForm = options.uploadForm;\n        this.opened = false;\n        this.searchBar = $$(\".bar .inner-bar #search-container input\");\n        this.tags = [];\n        this.memesContainer = options.memesContainer\n        this.browseButton = $$(\".bar .inner-bar button\");\n        this.browseButton.on('click', () => {\n            this.memesContainer.removeMemes();\n            setTimeout(() => {\n                this.memesContainer.endLoading();\n                this.memesContainer.appendMemes();\n            }, 2000);\n        });\n    }\n\n    toggleForm() {\n        this.uploadButton.toggleClass(\"pressed\");\n        this.uploadForm.toggleContainer();\n    }\n\n    toggle() {\n        this.file = $$(\".content form .blanks .file\").val();\n        if (!this.file && !this.uploaded) this.opened = false;\n        if (this.opened) {\n            this.uploadForm.toggleContent();\n            setTimeout(() => this.toggleForm(), 80);\n            this.opened = false;\n        } else {\n            this.toggleForm();\n            setTimeout(() => {\n                this.uploadForm.toggleContent();                \n            }, 250);\n            this.opened = true;\n        }\n    }\n\n    removeModal() {\n        this.modal.remove();\n        this.modal = null;\n    }\n\n    handleInput() {\n      this.database.once('value', (snapshot) => {\n        this.tagStore = {};\n        snapshot.forEach((childSnapshot) => {\n          const tags = childSnapshot.val().tags;\n          tags.forEach(tag => this.tagStore[tag] ? this.tagStore[tag] += 1 : this.tagStore[tag] = 1);\n        });\n      });\n      if (this.searchBar.val().length > 0) {\n        if (!this.modal) {\n          const options = {\n            bar: this,\n            searchBar: this.searchBar,\n            memesContainer: this.memesContainer,\n            tagStore: this.tagStore \n          };\n          this.modal = new Modal(options);\n          this.modal.render();\n        } else {\n          this.modal.update();\n        }\n      } else {\n        this.removeModal();\n      }\n    }\n\n    handleSubmit() {\n        this.memesContainer.setHeader(this.searchBar.val());\n        this.memesContainer.removeMemes();\n        setTimeout(() => {\n            this.memesContainer.endLoading();\n            this.memesContainer.appendMemes(this.searchBar.val());\n        }, 3000);\n    }\n\n    render() {\n        $$(() => setTimeout(() => this.bar.removeClass(\"hidden\"), 500));\n        this.uploadButton.on(\"click\", () => this.toggle());\n        this.searchBar.on(\"input\", () => this.handleInput());\n        this.searchBar.on(\"submit\", () => this.handleSubmit());\n    }\n}\n\nexport default Bar;","class Header {\n    constructor() {\n        this.header = $$(\"header.hidden\");\n    }\n\n    render() {\n        $$(() => setTimeout(() => this.header.removeClass(\"hidden\"), 500));\n    }\n}\n\nexport default Header;","class Komponent {\n    constructor(options) {\n        this.documentEl = options.documentEl;\n    }\n    \n    renderChildren(el, klass, t, cb = null, devault = true) {\n        for (let i = 0; i < el.children().length; i++) {\n            const child = el.children()[i];\n            if (devault) setTimeout(() => $$(child).removeClass(klass), t);\n            if (cb) cb(child, t);\n        }\n    }\n\n    toggleChildren(el, klass, t, cb = null, devault = true) {\n        el.children().each((child) => {\n            if (devault) $$(child).toggleClass(klass);\n            if (cb) cb(child, t);\n        })\n    }\n\n    renderChildrenInOrder(el, klass, t, cb = null, devault = true) {\n        const dt = t / el.children().length;\n        for (let i = 0; i < el.children().length; i++) {\n            const childEl = el.children()[i];\n            const child = $$(childEl);\n            if (devault) setTimeout(() => child.removeClass(klass), t);\n            // if (cb) cb(child, t / child.children().length);\n            if (cb) cb(child, t);\n            t += dt;\n        }\n    }\n    // for one-level destructuring\n    // (e.g. <li><i class\"fa fas=something></i> Something</li>)\n\n    renderChildrenInOrderEvenly(el, klass, t, cb = null, devault = true) {\n        const dt = t / el.children().length;\n        for (let i = 0; i < el.children().length; i++) {\n            const child = el.children()[i];\n            const element = $$(child);\n            // if ($(child).hasClass(\"hidden\")) {\n            if (element.children().length > 0) {\n                if (devault) () => element.removeClass(klass);\n                this.renderChildrenInOrderEvenly(element, t, cb, devault);\n                t += dt / element.children().length;\n            } else {\n                if (devault) setTimeout(() => element.removeClass(klass), t);\n                if (cb) cb(element);\n                t += dt;\n            }\n        }\n    }\n}\n\nexport default Komponent;","import Header from \"./header\";\nimport Bar from \"./bar\";\nimport UploadForm from \"./upload_form\";\nimport MemesContainer from \"./memes_container\";\n\nclass MemePool {\n    constructor(options) {\n        this.header = new Header(options);\n        this.uploadForm = new UploadForm(options);\n        this.memesContainer = new MemesContainer(options);\n        this.bar = new Bar(Object.assign(options, { uploadForm: this.uploadForm, memesContainer: this.memesContainer }));\n    }\n\n    render() {\n        this.header.render();\n        this.bar.render();\n        this.uploadForm.ready();\n        this.memesContainer.render();\n    }\n}\n\nexport default MemePool;","import Komponent from \"./komponent\";\n\nclass MemesContainer extends Komponent {\n    constructor(options) {\n        super(options);\n        this.memesContainer = $$(\".content .memes-container\");\n        this.header = $$(\".content .memes-container header p\");\n        this.memes = $$(\".content .memes-container ul\");\n        this.database = options.database\n    }\n\n    setHeader(tag) {\n        this.header.val(`#${tag}`);\n    }\n\n    appendMeme(data) {\n        const memesItem = `<li class=\"hidden\"><img src=\"${data.url}\"><a href=\"${data.url}\" download=\"${data.title.toLowerCase()}\">${data.title}</a></li>`;\n        this.memes.append(memesItem); \n        this.meme = $$(\".content .memes-container ul li\");\n        this.memeTitle = $$(\".content .memes-container ul li a\");\n        this.memeTitle.on(\"click\", () => {\n            const xhr = new XMLHttpRequest();\n            xhr.repsonseType = \"blob\";\n            xhr.onload = (event) => {\n                const blob = xhr.response;\n            }\n            xhr.open(\"GET\", data.url);\n            xhr.send();\n        })\n        setTimeout(() => this.meme.removeClass(\"hidden\"), 1100);\n    }\n\n    appendMemes(tag = null) {\n        this.database.on(\"child_added\", (snapshot) => {\n            const data = snapshot.val();\n            if (!tag) {\n                this.appendMeme(data);\n            } else {\n                if (data.tags.includes(tag)) {\n                    this.appendMeme(data);\n                };\n            }\n        });\n    }\n\n    removeMemes() {\n        this.memes.children().each(child => child.remove());\n        this.memes.append('<img src=\"assets/images/loading.gif\" class=\"loading\">');\n        this.loadingSign = $$(\".loading\");\n    }\n\n    endLoading() {\n        debugger\n        this.loadingSign.remove();\n    }\n\n    render() {\n        setTimeout(() => this.memesContainer.removeClass(\"hidden\"), 500);\n        setTimeout(() => this.header.removeClass(\"hidden\"), 1000);\n        this.appendMemes();\n    }\n}\n\nexport default MemesContainer;","class Modal {\n  constructor(options) {\n    this.bar = options.bar;\n    this.searchBar = options.searchBar;\n    this.tagStore = options.tagStore;\n    this.tags = Object.keys(this.tagStore).sort();\n  }\n\n  loadList() {\n    this.listElement = document.createElement('ul');\n    this.listElement.classList.add('modal', 'folded');\n    this.barElement = document.querySelector('.bar');\n    this.barElement.appendChild(this.listElement);\n    setTimeout(() => this.listElement.classList.remove('folded'), 100);\n  }\n\n  showList() {\n    setTimeout(() => {\n        this.loadingSign.remove();\n        this.list = $$(\".bar .modal\");\n        this.tags.forEach((tag) => {\n          if (tag.includes(this.searchBar.val())) {\n            const unit = this.tagStore[tag] > 1 ? \"memes\" : \"meme\";\n            this.list.append(`<li class=\"recommendation\"><p class=\"tag\">#${tag}</p><p class=\"meme-count\">${this.tagStore[tag]} ${unit} found</p></li>`);\n            const recommendation = $$(\".bar .modal .recommendation\");\n            recommendation.on('click', () => this.selectRecommendation(tag))\n          }\n        })\n    }, 2500)\n  }\n\n  selectRecommendation(tag) {\n    this.searchBar.val(tag);\n    this.bar.removeModal();\n    this.bar.handleSubmit();\n  }\n\n  load() {\n    setTimeout(() => {\n        this.modal.append('<img src=\"assets/images/loading.gif\" class=\"loading\">');\n        this.loadingSign = $$(\".loading\");\n    }, 200)\n  }\n\n  remove() {\n    this.barElement.removeChild(this.listElement);\n  }\n\n  render() {\n    this.loadList();\n    this.modal = $$('.bar .modal');\n    this.modal.removeClass('folded');\n    this.load();\n    this.showList();\n  }\n\n  update() {\n    this.modal.children().each(child => child.remove());\n    this.load();\n    this.showList();\n  }\n}\n\nexport default Modal;","import Komponent from \"./komponent\";\n\nclass UploadForm extends Komponent {\n    constructor(options) {\n        super(options);\n        this.form = $$(\".content form.hidden\");\n        this.left = $$(\".content form .blanks\");\n        this.titleInputEl = document.querySelector(\".content form .blanks .title\");\n        this.titleLabel =  $$(\".content form .blanks .title-field\");\n        this.titleInput = $$(\".content form .blanks label .title\");\n        this.upperTextLabel = $$(\".content form .blanks .upper-text-field\");\n        this.upperTextInput = $$(\".content form .blanks label .upper-text\");\n        this.lowerTextLabel = $$(\".content form .blanks .lower-text-field\");\n        this.lowerTextInput = $$(\".content form .blanks label .lower-text\");\n        this.tagsLabel =  $$(\".content form .blanks .tags-field\");\n        this.tagsInput = $$(\".content form .blanks label .tags\");\n        this.tagsButton = $$(\".content form .blanks .tags-field .input-container .add-button\");\n        this.tagsContainer = $$(\".content form .blanks label .tags-container\");\n        this.fileInput = $$(\".content form .blanks .file\");\n        this.right = $$(\".content form .preview\");\n        this.canvas = $$(\".content form .preview canvas\");\n        this.defaultMeme = $$(\".content form .preview #default-meme\");\n        this.buttonsContainer = $$(\".content form .preview .buttons-container\");\n        this.previewButton = $$(\".content form .preview .buttons-container .step.i button\");\n        this.submitButton = $$(\".content form .preview .buttons-container .step.ii button\");\n        this.upperTextInputEl = document.querySelector(\".content form .blanks .upper-text\");\n        this.lowerTextInputEl = document.querySelector(\".content form .blanks .lower-text\");\n        this.tagsInputEl = document.querySelector(\".content form .blanks .tags\");\n        this.fileInputEl = document.querySelector(\".content form .blanks .file\");\n        this.previewCanvas = document.querySelector(\".content form .preview #canvas\")\n        this.file = options.file;\n        this.opened = false;\n        this.drawPreview = this.drawPreview.bind(this);\n    }\n    \n    toggleContainer() {\n        this.form.toggleClass(\"hidden\");\n    }\n    \n    toggleContent() {\n        // if (!this.opened) {\n\n        // }\n        if (this.file) {\n            this.canvas.removeClass(\"none\");\n            this.defaultMeme.addClass(\"none\");\n        } else {\n            this.canvas.addClass(\"none\");\n            this.defaultMeme.removeClass(\"none\");\n        }\n        this.toggleChildren(this.form, \"removed\", 0);\n        // if (this.opened) {\n        //     debugger\n        //     this.removeLeft();\n        //     this.removeRight();\n        // }\n        // this.opened = this.opened ? false : true;\n        this.ready();\n    }\n\n    removeLeft() {\n        this.form.remove(\".content form .blanks\");\n    }\n\n    removeRight() {\n        this.form.remove(\".content form .preview\");\n    }\n\n    handleTags(e) {\n        // debugger\n        e.preventDefault();\n        if (!this.tags) this.tags = [];\n        const tag = this.tagsInput.val().toLowerCase();\n        if (!this.tagsInput.val() || this.tags.includes(tag)) return;\n        this.tags.push(tag);\n        this.tagsContainer.append(`<p class=\"tag\"><span class=\"tag-name\">#${tag}</span><span class=\"cross\">X</span></p>`);\n        this.tagsInputEl.value = \"\";\n        this.ready();\n    }\n\n    removeTags(e, tag) {\n        e.preventDefault();\n        const tagName = $$(tag.parent().children().nodes[0]).html().slice(1);\n        const tagNameIdx = this.tags.indexOf(tagName);\n        this.tags.splice(tagNameIdx, 1); // removing tag from tags array\n        tag.parent().remove();\n    }\n\n    handleUpload(e) {\n        e.preventDefault();\n        this.previewCtx = this.previewCanvas.getContext(\"2d\");\n        this.previewCtx.clearRect(0, 0, 180, 280);\n        this.file = e.currentTarget.files[0];\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", function() {\n            this.img.src = reader.result;\n        }, false)\n        // this.uploaded = true;\n    }\n\n    handlePreview(e) {\n        e.preventDefault();\n        if (this.file) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                this.img = new Image(180, 280);\n                this.img.src = reader.result;\n                this.canvas.removeClass(\"none\");\n                this.defaultMeme.addClass(\"none\");\n                this.drawPreview();\n                this.submitButton.removeClass(\"disabled\");\n                this.submitButton.addClass(\"ready\");\n                if (!this.titleInput.val()) {\n                    this.titleInputEl.value = this.file.name.slice(0, -4);\n                    this.title = this.file.name.slice(0, -4);\n                } else {\n                    this.title = this.titleInput.val();\n                }\n                this.upperText = this.upperTextInput.val();\n                this.lowerText = this.lowerTextInput.val();\n            }\n            reader.readAsDataURL(this.file);\n        } else {\n            console.log(\"No file found\");\n        }\n    } \n\n    drawPreview() {\n        this.previewCanvas.width = 180;\n        this.previewCanvas.height = 280;\n        this.previewCtx.clearRect(0, 0, 180, 280);\n        this.previewCtx.drawImage(this.img, 0, 0, 180, 280);\n        this.fontSize = this.previewCanvas.width / 9;\n        this.previewCtx.font = `${this.fontSize}px Impact`;\n        this.previewCtx.fillStyle = \"#fff\";\n        this.previewCtx.strokeStyle = \"#333\";\n        this.previewCtx.lineWidth = this.fontSize / 15;\n        this.previewCtx.textAlign = \"center\";\n\n        this.previewCtx.textBaseline = \"top\";\n        this.upperText.split(\"\\n\").forEach((line, i) => {\n            this.previewCtx.fillText(line.toUpperCase(), this.previewCanvas.width / 2, i * this.fontSize, this.previewCanvas.width);\n            this.previewCtx.strokeText(line.toUpperCase(), this.previewCanvas.width / 2, i * this.fontSize, this.previewCanvas.width);\n        })\n\n        this.previewCtx.textBaseline = \"middle\";\n        if (this.lowerText) this.lowerText.split(\"\\n\").forEach((line, i) => {\n            this.previewCtx.fillText(line.toUpperCase(), this.previewCanvas.width / 2, this.previewCanvas.height - (this.lowerText.split(\"\\n\").length - i) * this.fontSize, this.previewCanvas.width);\n            this.previewCtx.strokeText(line.toUpperCase(), this.previewCanvas.width / 2, this.previewCanvas.height - (this.lowerText.split(\"\\n\").length - i) * this.fontSize, this.previewCanvas.width);\n        })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        if (!this.file) return;\n        this.formStatus = {\n            title: false,\n            upperText: false,\n            lowerText: false,\n            tags: false,\n        };\n        if (!this.title || this.title.includes(\"\\\\\") || this.title.includes(\"?\") || this.title.includes(\"%\") || this.title.includes(\"*\")) {\n            this.titleInput.addClass(\"input-error\");\n            if (!this.titleMsg) this.titleMsg = $$(\".content form .blanks .title-field .msg\");\n            this.titleMsg.html('Invalid characters: \\\\ ? % *');\n        } else {\n            this.titleInput.removeClass(\"input-error\");\n            this.formStatus[\"title\"] = true;\n            if (this.titleMsg) this.titleMsg.html(\" \");\n        }\n        if (!this.upperText && !this.lowerText) {\n            this.upperTextInput.addClass(\"input-error\");\n            this.lowerTextInput.addClass(\"input-error\");\n            if (!this.upperTextMsg) this.upperTextMsg = $$(\".content form .blanks .upper-text-field .msg\");\n            if (!this.lowerTextMsg) this.lowerTextMsg = $$(\".content form .blanks .lower-text-field .msg\");\n            this.upperTextMsg.html('1 field needs to be filled.');\n            this.lowerTextMsg.html('1 field needs to be filled.');\n        }\n        if (this.upperText) {\n            this.formStatus[\"upperText\"] = true;\n            this.upperTextInput.removeClass(\"input-error\");\n            if (this.upperTextMsg) this.upperTextMsg.html(\" \");\n        }\n        if (this.lowerText) {\n            this.formStatus[\"lowerText\"] = true;\n            this.lowerTextInput.removeClass(\"input-error\");\n            if (this.lowerTextMsg) this.lowerTextMsg.html(\" \");\n        }\n        if (!this.tags || this.tags.length === 0) {\n            this.tagsInput.addClass(\"input-error\");            \n            if (!this.tagsMsg) this.tagsMsg = $$(\".content form .blanks .tags-field .msg\");\n            this.tagsMsg.html(\"At least 1 tag required\")\n        } else {\n            this.tagsInput.removeClass(\"input-error\");\n            this.formStatus[\"tags\"] = true;\n            if (this.tagsMsg) this.tagsMsg.html(\" \");\n        }\n        const counter = 0;\n        for (let key in this.formStatus) {\n            if (!this.formStatus[key] && (key !== \"upperText\" || key !== \"lowerText\")) return; // title and tags required\n            if (!this.formStatus[key] && key === \"upperText\") {\n                counter += 1;\n            } else if (!this.formStatus[key] && key === \"lowerText\" && counter > 0) {\n                return;\n            }\n        }\n        this.fileName = this.title.toLowerCase().split(\" \").join(\"-\");\n        this.fileType = this.file.name.split(\"\").reverse().slice(0, 4).reverse().join(\"\");\n        const storageRef = firebase.storage().ref(); // /memes/${this.fileName}${this.fileType}\n        const memeRef = storageRef.child(`${this.fileName}${this.fileType}`);\n        const uploadTask = memeRef.putString(this.previewCanvas.toDataURL(), 'data_url');\n        uploadTask.on(\"state_changed\",\n            (snapshot) => {\n                this.titleInputEl.value = \"\";\n                this.upperTextInputEl.value = \"\";\n                this.lowerTextInputEl.value = \"\";\n                this.tagsInputEl.value = \"\";\n                this.fileInputEl.value = \"\";\n                this.submitButton.removeClass(\"ready\");\n                this.submitButton.addClass(\"disabled\");\n                this.tagsContainer.children().each(child => child.remove());\n                this.file = \"\";\n                this.canvas.addClass(\"none\");\n                this.defaultMeme.removeClass(\"none\");\n                let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n                switch (snapshot.state) {\n                    case \"paused\":\n                        console.log('Upload is paused');\n                        break;\n                    case \"running\":\n                        console.log('Upload is running');\n                        break;\n                }\n            },\n            (error) => {\n                switch (error.code) {\n                    case \"storage/canceled\":\n                        console.log(\"User canceled the upload\")\n                        break;\n                    case \"storage/unknown\":\n                        console.log(\"Unknown error occurred, inspect error.serverResponse\");\n                        break;\n                }\n            }, \n            () => {\n                uploadTask.snapshot.ref.getDownloadURL()\n                .then(\n                    (downloadURL) => {\n                        console.log(downloadURL);\n                        this.url = downloadURL;\n                    }\n                ).then(\n                    () => {\n                        const dataRef = firebase.database().ref(\"memes\");\n                        const memeData = {\n                            title: this.title,\n                            tags: this.tags,\n                            upperText: this.upperText,\n                            lowerText: this.lowerText,\n                            url: this.url,\n                        };\n                        dataRef.push(memeData);\n                    }\n                ).then(\n                    () => {\n                        this.toggleContent();\n                        setTimeout(() => this.toggleContainer(), 150);\n                    }\n                );\n        });\n    }\n\n    ready() {\n        if (this.titleInput) this.titleInput.on(\"change\", (e) => this.title = e.currentTarget.value.toUpperCase());\n        if (this.upperTextInput) this.upperTextInput.on(\"change\", (e) => this.upperText = e.currentTarget.value.toUpperCase());\n        if (this.lowerTextInput) this.lowerTextInput.on(\"change\", (e) => this.lowerText = e.currentTarget.value.toUpperCase());\n        if (this.tagsButton) this.tagsButton.off('click');\n        if (this.tagsButton) this.tagsButton.on(\"click\", (e) => this.handleTags(e));\n        this.tagsRemovers = $$(\".content form .blanks label .tags-container .tag .cross\");\n        if (this.tagsRemovers) this.tagsRemovers.each((remover) => $$(remover).on(\"click\", (e) => this.removeTags(e, $$(remover))));\n        if (this.fileInput) this.fileInput.on(\"change\", (e) => this.handleUpload(e));\n        if (this.previewButton) this.previewButton.on(\"click\", (e) => this.handlePreview(e));\n        if (this.submitButton) this.submitButton.on(\"click\", (e) => this.handleSubmit(e));\n    }\n}\n\nexport default UploadForm;"],"sourceRoot":""}